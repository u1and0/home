<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>keyEquivalent</key>
	<string>^~G</string>
	<key>name</key>
	<string>Sublime Haskell AutoFix Panel</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>^Press (.*)$</string>
			<key>name</key>
			<string>keyword.other.autofix</string>
		</dict>
		<dict>
			<key>match</key>
			<string>^\s+(Why not:)$</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>string.quoted.double.autofix comment.details.whynot.autofix</string>
				</dict>
			</dict>
			<key>name</key>
			<string>message.whynot.autofix</string>
		</dict>
		<dict>
			<key>match</key>
			<string>^(—\s.*)$</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>string.quoted.double.autofix</string>
				</dict>
			</dict>
			<key>name</key>
			<string>comment.message.autofix</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#expression_stuff</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>type</key>
		<dict>
			<key>patterns</key>
			<array>
 				<dict>
					<key>match</key>
					<string>-&gt;|→</string>
					<key>name</key>
					<string>keyword.operator.arrow.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>=&gt;|⇒</string>
					<key>name</key>
					<string>keyword.operator.big-arrow.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(Int(eger)?|Maybe|Either|Bool|Float|Double|Char|String|Ordering|ShowS|ReadS|FilePath|IO(Error)?)\b</string>
					<key>name</key>
					<string>storage.type.haskell support.type.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!')\b[a-z][\w']*\b</string>
					<key>name</key>
					<string>variable.generic.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!')\b[A-Z][\w']*\b</string>
					<key>name</key>
					<string>storage.type.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\(\)</string>
					<key>name</key>
					<string>storage.type.haskell</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.haskell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.haskell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.type_signature.brace.haskell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\[)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.haskell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.haskell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.type_signature.list.haskell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>function_signature</key>
		<dict>
			<key>begin</key>
			<!--
			SublimeText2 workaround
			If begin doesn't capture anything (using only lookaheads), then end tries match just from the beginning
			And it cause infinite loop in case of function with no indentation (so there's nothing matched)
			SublimeText3 works well in that case

			We also can't match full name of function, because there're cases with several names:
				* x, y, z :: Int
				* [x, y, z] :: [Int]

			Therefore we are just trying to much something: name, open bracket etc.
			And we match other stuff within patterns
			-->
			<!-- <string>^(\s*)(?!--)(?=([\w\s,']*|\(.*\)|\[.*\])\s+((::)|∷))</string> -->
			<string>^(\s*)(?!--)(?:(\(\W\)|[\w']+)|[\(\[])(?=[\w',\s\[\]\(\)]*((?:::)|∷))</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.haskell</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^(?!\1\s)|(?=})</string>
			<key>name</key>
			<string>meta.declaration.function.haskell</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=.*((::)|∷))</string>
					<key>end</key>
					<string>((::)|∷)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.double-colon.haskell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.declaration.function.names.haskell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>((?&lt;!')\b[a-z_][\w']*|\(\W+\))</string>
							<key>name</key>
							<string>entity.name.function.haskell</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>constructor_signature</key>
		<dict>
			<key>begin</key>
			<string>^(\s+)([A-Z][\w']*|\(\W+\))\s*((::)|∷)</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.other.haskell entity.name.constructor.haskell</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.other.double-colon.haskell</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^(?!\1\s)</string>
			<key>name</key>
			<string>meta.declaration.function.haskell</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>expression_stuff</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>([A-Z][\w']*\.)+</string>
					<key>name</key>
					<string>storage.module.haskell entity.name.module.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(abs|acos|acosh|all|and|any|appendFile|asTypeOf|asin|asinh|atan|atan2|atanh|break|ceiling|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromEnum|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|head|id|init|interact|ioError|isDenormalized|isIEEE|isInfinite|isNaN|isNegativeZero|iterate|last|lcm|length|lex|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|odd|or|otherwise|pi|pred|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|read|readFile|readIO|readList|readLn|readParen|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showList|showParen|showString|shows|showsPrec|significand|signum|sin|sinh|snd|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|toEnum|toInteger|toRational|truncate|uncurry|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\b</string>
					<key>name</key>
					<string>support.function.prelude.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(error|undefined)\b</string>
					<key>name</key>
					<string>support.function.prelude.haskell invalid.haskell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#infix_op</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>List</string>
					<key>match</key>
					<string>\[|\]</string>
					<key>name</key>
					<string>keyword.operator.haskell punctuation.list.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>punctuation.separator.comma.haskell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.entity.haskell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.entity.haskell</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>In case this regex seems unusual for an infix operator, note that Haskell allows any ordinary function application (elem 4 [1..10]) to be rewritten as an infix expression (4 `elem` [1..10]).</string>
					<key>match</key>
					<string>(`)([A-Z][\w']*\.)*[a-z][\w']*(`)</string>
					<key>name</key>
					<string>keyword.operator.function.infix.haskell</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{)(?!-)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.haskell punctuation.record.haskell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;!-)(\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.haskell punctuation.record.haskell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>record.expression.haskell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&lt;!')\b[a-z][a-zA-Z_0-9']+\s+(=)</string>
							<key>captures</key>
							<dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.haskell</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression_stuff</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>\(\)</string>
					<key>name</key>
					<string>constant.other.haskell entity.name.constructor.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\[\]</string>
					<key>name</key>
					<string>constant.other.haskell entity.name.constructor.haskell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>In case this regex seems overly general, note that Haskell permits the definition of new operators which can be nearly any string of punctuation characters, such as $%^&amp;*.</string>
					<key>match</key>
					<string>[@|!%$?~+:.\-*=&lt;/&gt;\\∘→⇒⇔←⇐≤≥≡⋮\[\]]+</string>
					<key>name</key>
					<string>keyword.operator.haskell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#common_keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literals</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#quasi_quote</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#ctor_names</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source</string>
	<key>uuid</key>
	<string>230FDB31-F039-4BC8-B6A1-0919F3021A22</string>
</dict>
</plist>
